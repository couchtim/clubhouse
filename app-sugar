#! /usr/bin/env node

/*
    Bare-bones app to make it easy to update a CouchApp.

    Copyright 2010 by Tim Smith <tim@couchone.com>
    Released under the BSD license; see ./LICENSE.markdown
*/

// To keep this as uncluttered as possible, several things are hard-coded
// into this application. It can be extended in a lot of ways, with a bit of
// node.js fun.
var appPath = './bugclub/clubhouse';
var dbUri = 'http://tim:topSecret@couchtim.couchone.com/bugclub';

// Non-default modules, available from, among other places,
// NPM, a Node Package Manager: http://howtonode.org/introduction-to-npm
var mime = require('mime');
var step = require('step');

// Default node.js modules
var assert = require('assert');
var fs = require('fs');
var path = require('path');
var sys = require('sys');

// Local modules
var util = require('./util');


var app = require(appPath);
var ddocUri = dbUri + '/' + app.ddoc._id;


function loadDirectory(dir, storeFunc) {
    // Read all files from the directory DIR that is in
    // the same directory as the application definition
    var sourceDir = path.join(path.dirname(appPath), dir);
    util.findFilesSync(sourceDir).forEach(function (f) {
        var contents = fs.readFileSync(path.join(sourceDir, f));
        storeFunc(f, contents);
        util.log('Loaded ' + path.join(dir, f));
    });
}

function loadAppAttachments(ddoc) {
    util.setDefault(ddoc, { '_attachments': {} });
    loadDirectory('attachments', function (f, contents) {
        ddoc._attachments[f] = {
            content_type: mime.lookup(f),
            data: contents.toString('base64')
        };
    });
}

function loadAppFiles(ddoc, dir, stripJsExtension) {
    loadDirectory(dir, function (f, contents) {
        var obj = ddoc;
        var term;

        // CouchDB expects modules without the '.js' extension
        if (stripJsExtension) { f = f.replace(/\.[^\.]*/, ''); }

        // Convert nested directories into nested objects; e.g.
        // templates/foo/bar.txt => ddoc.templates.foo['bar.txt']
        f = [dir].concat(f.split('/'));
        //sys.debug(sys.inspect(f));
        while (f.length > 1) {
            term = f.shift();
            if (!obj[term]) { obj[term] = {}; }
            obj = obj[term];
        }

        term = f.shift();
        obj[term] = contents.toString('utf8');
    });
}

loadAppAttachments(app.ddoc);
loadAppFiles(app.ddoc, 'modules', true);
loadAppFiles(app.ddoc, 'templates', false);
//sys.debug(sys.inspect(app.ddoc));

step(
    function getCurrentDdoc() {
        util.jsonRequest({ uri: ddocUri, expect: [200, 404] }, this);
    },

    function putAppDdoc(err, resp, body) {
        assert.ifError(err);

        if (body._rev) {
            app.ddoc._rev = body._rev;
        }
        else {
            // Warn about this, in case it was a typo
            sys.debug('NOTICE: Starting a new design doc at "' + ddocUri + '"');
        }

        util.jsonRequest({
            uri: ddocUri,
            method: 'PUT',
            body: app.ddoc
        }, this);
    },

    function finish(err, resp, body) {
        assert.ifError(err);
        util.log(JSON.stringify({ ok: true, rev: body.rev }));
        process.exit(0);
    }
);

// vim:et:sts=4:sw=4:ft=javascript:
